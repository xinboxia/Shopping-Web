{"ast":null,"code":"export const initialState = {\n  basket: [],\n  user: null\n};\nexport const getBasketTotal = basket => basket === null || basket === void 0 ? void 0 : basket.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n  console.log(action);\n\n  switch (action.type) {\n    case \"ADD_TO_BASKET\":\n      return { // ... can keep previous state not lost\n        ...state,\n        basket: [...state.basket, action.item]\n      };\n\n    case \"REMOVE_FROM_BASKET\":\n      const index = state.basket.findIndex(basketItem => basketItem.id == action.id); // cut off the one we want to delete\n      // instead of deleting all same items in the basket\n\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(`can remove, product (id: ${action.id}) is not in basket`);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer; // reducer is a place where you declare all the application level states \n// which can be used later by the application","map":{"version":3,"sources":["/Users/xinboxia/Desktop/amazon-clone/src/reducer.js"],"names":["initialState","basket","user","getBasketTotal","reduce","amount","item","price","reducer","state","action","console","log","type","index","findIndex","basketItem","id","newBasket","splice","warn"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAE,EADgB;AAExBC,EAAAA,IAAI,EAAE;AAFkB,CAArB;AAKP,OAAO,MAAMC,cAAc,GAAIF,MAAD,IAC1BA,MAD0B,aAC1BA,MAD0B,uBAC1BA,MAAM,CAAEG,MAAR,CAAe,CAACC,MAAD,EAASC,IAAT,KAAkBA,IAAI,CAACC,KAAL,GAAaF,MAA9C,EAAsD,CAAtD,CADG;;AAGP,MAAMG,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,UAAQA,MAAM,CAACG,IAAf;AACI,SAAK,eAAL;AACI,aAAO,EACH;AACA,WAAGJ,KAFA;AAGHR,QAAAA,MAAM,EAAE,CAAC,GAAGQ,KAAK,CAACR,MAAV,EAAkBS,MAAM,CAACJ,IAAzB;AAHL,OAAP;;AAKJ,SAAK,oBAAL;AACI,YAAMQ,KAAK,GAAGL,KAAK,CAACR,MAAN,CAAac,SAAb,CACTC,UAAD,IAAgBA,UAAU,CAACC,EAAX,IAAiBP,MAAM,CAACO,EAD9B,CAAd,CADJ,CAKI;AACA;;AACA,UAAIC,SAAS,GAAG,CAAC,GAAGT,KAAK,CAACR,MAAV,CAAhB;;AACA,UAAGa,KAAK,IAAI,CAAZ,EAAe;AACXI,QAAAA,SAAS,CAACC,MAAV,CAAiBL,KAAjB,EAAwB,CAAxB;AAEH,OAHD,MAGO;AACHH,QAAAA,OAAO,CAACS,IAAR,CACK,4BAA2BV,MAAM,CAACO,EAAG,oBAD1C;AAGH;;AAEL;AACI,aAAOR,KAAP;AAzBR;AA2BH,CA7BD;;AA+BA,eAAeD,OAAf,C,CAEA;AACA","sourcesContent":["export const initialState = {\n    basket: [],\n    user: null\n}\n \nexport const getBasketTotal = (basket) => \n    basket?.reduce((amount, item) => item.price + amount, 0);\n\nconst reducer = (state, action) => {\n    console.log(action);\n    switch (action.type) {\n        case \"ADD_TO_BASKET\":\n            return {\n                // ... can keep previous state not lost\n                ...state,\n                basket: [...state.basket, action.item],\n            }\n        case \"REMOVE_FROM_BASKET\":\n            const index = state.basket.findIndex(\n                (basketItem) => basketItem.id == action.id\n            );\n\n            // cut off the one we want to delete\n            // instead of deleting all same items in the basket\n            let newBasket = [...state.basket];\n            if(index >= 0) {\n                newBasket.splice(index, 1);\n\n            } else {\n                console.warn(\n                    `can remove, product (id: ${action.id}) is not in basket`\n                )\n            }\n                \n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n\n// reducer is a place where you declare all the application level states \n// which can be used later by the application"]},"metadata":{},"sourceType":"module"}